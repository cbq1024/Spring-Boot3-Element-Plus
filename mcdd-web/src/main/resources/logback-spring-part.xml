<?xml version="1.0" encoding="UTF-8"?>
<!-- 注意：此日志配置将info、error日志分开输出，并且按照小时生成，日志文件不足100MB则还打印到第一个生成的日志文件。 -->
<!--
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    configuration 子节点为 appender、logger、root
    注意：此日志配置是将info、error日志分开放置。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 用于区分不同应用程序的记录 -->
    <contextName>koi-logback</contextName>

    <!-- 日志文件所在目录，如果是tomcat，如下写法日志文件会在则为${TOMCAT_HOME}/bin/logs/目录下 -->
    <!-- <property name="KOI_ADMIN_LOGS" value="D:/Koi-Admin-Logs/KoiWebLogs"/> -->
    <property name="KOI_ADMIN_LOGS" value="./logs"/>
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志格式   [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n  -->
    <property name="CONSOLE_LOG_PATTERN"
              value="${CONSOLE_LOG_PATTERN:-%clr([TraceId: %X{traceId}]%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 控制台 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->
            <!-- <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n</pattern> -->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern><!-- 彩打日志 -->
            <!-- 解决乱码问题 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 滚动文件 -->
    <appender name="infoFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
             <fileNamePattern>${KOI_ADMIN_LOGS}/info/%d{yyyy-MM-dd}/%d{HH}.log</fileNamePattern>
             <!-- 每个小时生成一个新的文件，而不受日志大小限制（比如100MB）的影响，可以将这个注释 -->
             <!-- 单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1 -->
             <maxFileSize>100MB</maxFileSize>
             <!-- 保存最近30天的日志 -->
             <maxHistory>30</maxHistory>
             <!-- 所有的日志文件最大3G，超过就会删除旧的日志 -->
             <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[[TraceId: %X{traceId}]%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 滚动文件 -->
    <appender name="errorFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- ThresholdFilter：临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${KOI_ADMIN_LOGS}/error/%d{yyyy-MM-dd}/%d{HH}.log</fileNamePattern>
            <!-- 每个小时生成一个新的文件，而不受日志大小限制（比如100MB）的影响，可以将这个注释 -->
            <!-- 单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1 -->
            <maxFileSize>100MB</maxFileSize>
            <!-- 保存最近30天的日志 -->
            <maxHistory>30</maxHistory>
            <!-- 所有的日志文件最大3G，超过就会删除旧的日志 -->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <charset>UTF-8</charset>
            <pattern>[[TraceId: %X{traceId}]%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] %-5level %logger{36} : %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 配置多环境日志输出  可以在application.properties中配置选择哪个profiles : spring.profiles.active=dev -->
    <!-- 开发环境：打印控制台 -->
    <springProfile name="dev">
        <root level="info">
            <appender-ref ref="stdout"/>
            <appender-ref ref="infoFile"/>
            <appender-ref ref="errorFile"/>
        </root>
    </springProfile>
    <!-- 生产环境：输出到文件 -->
    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="infoFile"/>
            <appender-ref ref="errorFile"/>
        </root>
    </springProfile>

</configuration>
